<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.winn.aliyun</groupId>
    <artifactId>winn-pri</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <!--clean install -Denv=dev         此命令可以根据传值来修改<properties>标签中的属性的值-->
    <!--用法： -DpropertyName=propertyValue-->
    <!--作用：对插件的目标参数进行配置-->
    <!--实例，例如大家经常使用的maven在执行本地安装命令install的时候跳过单元测试为 mvn install -Dmaven.test.skip=true。-->
    <!--参数-D是Java自带的，其功能是设置Java的系统属性，Maven只是对这个参数进行了重用。那么就可以在准备插件的时候检查系统属性，进而对插件参数实现全局配置。-->
    <!--mvn -DpropertyName=propertyValue clean package-->
    <!--如果propertyName不存在pom.xml，它将被设置。-->
    <!--如果propertyName已经存在pom.xml，其值将被作为参数传递的值覆盖-D。-->
    <!--如果要发送多个变量，请使用多个空格分隔符加-D：-->
    <!--mvn -DpropA=valueA -DpropB=valueB -DpropC=valueC clean package-->
    <properties>
        <name>winn-pri</name>
        <env>dev</env>
        <winn-pri>1.0.0</winn-pri>
        <outPath>target</outPath>
        <scmVersion>HEAD</scmVersion>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>



    <!--在pom.xml中配置远程仓库。我们项目的pom文件会继承maven安装路径下的一个超级pom。而在超级pom中，-->
    <!--配置了一个默认的远程仓库，就是中央仓库。可以找到超级pom：maven-model-builder-3.2.5.jar中-->
    <!--org\apache\maven\model\pom-4.0.0.xml。其中关于默认远程仓库的配置内容如下：-->
        <!--如图中分别配置了远程仓库的地址和插件仓库的地址。假如想要使用私服作为默认的下载构建的地址，-->
    <!--可以在自己项目的pom文件中复制上述配置，直接将url的地址改成私服的地址即可。-->

    <repositories>
        <repository>
            <id>central</id>
            <name>Central Repository</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <layout>default</layout>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <name>Central Repository</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <layout>default</layout>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <releases>
                <updatePolicy>never</updatePolicy>
            </releases>
        </pluginRepository>
    </pluginRepositories>


    <build>
        <sourceDirectory>src/main/java</sourceDirectory>
        <!--设置输出jar包位置-->
        <outputDirectory>${outPath}/classes</outputDirectory>
        <directory>${outPath}</directory>
        <finalName>${name}-${env}-${winn-pri}.${scmVersion}</finalName>
        <resources>
            <!--设置打包路径-->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <!--<includes>-->
                    <!--<include>**/*.xml</include>-->
                    <!--<include>**/*.properties</include>-->
                    <!--<include>**/*.yml</include>-->
                <!--</includes>-->
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>*.xml</include>
                    <include>*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>conf/${env}</directory>
                <!--<directory>conf/${env}</directory>-->
                <filtering>true</filtering>
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.properties</include>
                </includes>
            </resource>
        </resources>




        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.5.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <dependencies>
        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-starter-data-jdbc</artifactId>-->
        <!--</dependency>-->
        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-starter-data-jpa</artifactId>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>spring-boot-starter-logging</artifactId>
                    <groupId>org.springframework.boot</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.10</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.28</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
            <!--排除掉springboot默认的日志配置-->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
        <!-- log4j异步需要依赖disruptor 框架 -->
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>3.4.2</version>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>org.mybatis.spring.boot</groupId>-->
            <!--<artifactId>mybatis-spring-boot-starter</artifactId>-->
            <!--<version>2.1.2</version>-->
        <!--</dependency>-->

        <!--热部署-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!--redis客户端-->
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>2.8.0</version>
        </dependency>

    </dependencies>


</project>
